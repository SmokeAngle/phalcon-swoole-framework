<?php
namespace Thrift\Client\Member;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class Platform {
  const HLJAPP = 1;
  const QQ = 2;
  const WeiBo = 3;
  const Wechat = 4;
  const QHLJApp = 6;
  const QHLJPC = 7;
  const HLJPC = 8;
  static public $__names = array(
    1 => 'HLJAPP',
    2 => 'QQ',
    3 => 'WeiBo',
    4 => 'Wechat',
    6 => 'QHLJApp',
    7 => 'QHLJPC',
    8 => 'HLJPC',
  );
}

final class DeviceType {
  const iPhone = 1;
  const Android = 2;
  const iPad = 4;
  const AndroidPad = 5;
  const AndroidTv = 6;
  const WinPhone = 39;
  const Wechat = 40;
  const QQ = 60;
  const EMail = 80;
  static public $__names = array(
    1 => 'iPhone',
    2 => 'Android',
    4 => 'iPad',
    5 => 'AndroidPad',
    6 => 'AndroidTv',
    39 => 'WinPhone',
    40 => 'Wechat',
    60 => 'QQ',
    80 => 'EMail',
  );
}

final class GroupType {
  const simple = 1;
  const heavy = 2;
  const gov = 3;
  const preOrder = 4;
  const largeCustomer = 5;
  static public $__names = array(
    1 => 'simple',
    2 => 'heavy',
    3 => 'gov',
    4 => 'preOrder',
    5 => 'largeCustomer',
  );
}

final class GroupMode {
  const shoppingTime = 15;
  const shoppingFrequency = 16;
  const purchaseAmount = 17;
  const activeDegree = 18;
  const other = 0;
  static public $__names = array(
    15 => 'shoppingTime',
    16 => 'shoppingFrequency',
    17 => 'purchaseAmount',
    18 => 'activeDegree',
    0 => 'other',
  );
}

final class MemberLevel {
  const microCard = 0;
  const silverCard = 1;
  const goldCard = 2;
  const platinum = 3;
  static public $__names = array(
    0 => 'microCard',
    1 => 'silverCard',
    2 => 'goldCard',
    3 => 'platinum',
  );
}

/**
 * 执行状态
 */
class Status {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
    }
  }

  public function getName() {
    return 'Status';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Status');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 用户凭据
 */
class Credentials {
  static $_TSPEC;

  /**
   * @var int
   */
  public $platform = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'Credentials';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Credentials');
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 1);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员基础数据
 */
class MemberBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $store_code = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'store_code',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['store_code'])) {
        $this->store_code = $vals['store_code'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberBase';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->store_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberBase');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 2);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->store_code !== null) {
      $xfer += $output->writeFieldBegin('store_code', TType::STRING, 3);
      $xfer += $output->writeString($this->store_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 5);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 6);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberBaseResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberBase
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberBase',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberBaseResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberBase();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberBaseResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员常用数据
 * 
 * 业务挂钩，常用数据。
 */
class MemberCommon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var string
   */
  public $store_code = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $card_no = null;
  /**
   * @var int
   */
  public $card_level = null;
  /**
   * @var int
   */
  public $card_isbind = null;
  /**
   * @var int
   */
  public $created_at = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'store_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'card_no',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'card_level',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'card_isbind',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['store_code'])) {
        $this->store_code = $vals['store_code'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['card_no'])) {
        $this->card_no = $vals['card_no'];
      }
      if (isset($vals['card_level'])) {
        $this->card_level = $vals['card_level'];
      }
      if (isset($vals['card_isbind'])) {
        $this->card_isbind = $vals['card_isbind'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'MemberCommon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->store_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_isbind);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCommon');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->store_code !== null) {
      $xfer += $output->writeFieldBegin('store_code', TType::STRING, 2);
      $xfer += $output->writeString($this->store_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 4);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_no !== null) {
      $xfer += $output->writeFieldBegin('card_no', TType::STRING, 5);
      $xfer += $output->writeString($this->card_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_level !== null) {
      $xfer += $output->writeFieldBegin('card_level', TType::I32, 6);
      $xfer += $output->writeI32($this->card_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_isbind !== null) {
      $xfer += $output->writeFieldBegin('card_isbind', TType::I32, 7);
      $xfer += $output->writeI32($this->card_isbind);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 8);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 9);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCommonResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberCommon
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberCommon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberCommonResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberCommon();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCommonResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员资料数据
 */
class MemberProfile {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var string
   */
  public $nickname = null;
  /**
   * @var string
   */
  public $headimgurl = null;
  /**
   * @var int
   */
  public $gender = null;
  /**
   * @var int
   */
  public $birthday = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'headimgurl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'birthday',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['nickname'])) {
        $this->nickname = $vals['nickname'];
      }
      if (isset($vals['headimgurl'])) {
        $this->headimgurl = $vals['headimgurl'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['birthday'])) {
        $this->birthday = $vals['birthday'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->headimgurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->birthday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberProfile');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickname !== null) {
      $xfer += $output->writeFieldBegin('nickname', TType::STRING, 2);
      $xfer += $output->writeString($this->nickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->headimgurl !== null) {
      $xfer += $output->writeFieldBegin('headimgurl', TType::STRING, 3);
      $xfer += $output->writeString($this->headimgurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 4);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->birthday !== null) {
      $xfer += $output->writeFieldBegin('birthday', TType::I32, 5);
      $xfer += $output->writeI32($this->birthday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 6);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 7);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberProfileResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberProfile
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberProfile',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberProfileResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberProfile();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberProfileResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员平台设置数据
 */
class MemberSetting {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_setting_id = null;
  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var int
   */
  public $platform = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $value = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_setting_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_setting_id'])) {
        $this->member_setting_id = $vals['member_setting_id'];
      }
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberSetting';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_setting_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberSetting');
    if ($this->member_setting_id !== null) {
      $xfer += $output->writeFieldBegin('member_setting_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_setting_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 2);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 3);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 5);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 6);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 7);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 8);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberSettingResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberSetting
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberSetting',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberSettingResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberSetting();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberSettingResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberSettingsResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberSetting[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Client\Member\MemberSetting',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberSettingsResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Thrift\Client\Member\MemberSetting();
              $xfer += $elem5->read($input);
              $this->data []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberSettingsResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员第三方平台账户数据
 */
class MemberThirdparty {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_thirdparty_id = null;
  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var int
   */
  public $platform = null;
  /**
   * @var string
   */
  public $openid = null;
  /**
   * @var string
   */
  public $unionid = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_thirdparty_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'openid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'unionid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_thirdparty_id'])) {
        $this->member_thirdparty_id = $vals['member_thirdparty_id'];
      }
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['openid'])) {
        $this->openid = $vals['openid'];
      }
      if (isset($vals['unionid'])) {
        $this->unionid = $vals['unionid'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberThirdparty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_thirdparty_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberThirdparty');
    if ($this->member_thirdparty_id !== null) {
      $xfer += $output->writeFieldBegin('member_thirdparty_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_thirdparty_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 2);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 3);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openid !== null) {
      $xfer += $output->writeFieldBegin('openid', TType::STRING, 4);
      $xfer += $output->writeString($this->openid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unionid !== null) {
      $xfer += $output->writeFieldBegin('unionid', TType::STRING, 5);
      $xfer += $output->writeString($this->unionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 6);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 7);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberThirdpartyResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberThirdparty
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberThirdparty',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberThirdpartyResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberThirdparty();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberThirdpartyResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员收件地址信息
 */
class MemberAddress {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_address_id = null;
  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $telephone = null;
  /**
   * @var string
   */
  public $province = null;
  /**
   * @var string
   */
  public $province_code = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $city_code = null;
  /**
   * @var string
   */
  public $area = null;
  /**
   * @var string
   */
  public $area_code = null;
  /**
   * @var string
   */
  public $street = null;
  /**
   * @var string
   */
  public $street_code = null;
  /**
   * @var string
   */
  public $store_code = null;
  /**
   * @var string
   */
  public $detail = null;
  /**
   * @var string
   */
  public $zip_code = null;
  /**
   * @var int
   */
  public $is_default = null;
  /**
   * @var int
   */
  public $deleted = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_address_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'telephone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'province_code',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'city_code',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'area',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'area_code',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'street',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'street_code',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'store_code',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'zip_code',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'is_default',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'deleted',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_address_id'])) {
        $this->member_address_id = $vals['member_address_id'];
      }
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['telephone'])) {
        $this->telephone = $vals['telephone'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['province_code'])) {
        $this->province_code = $vals['province_code'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['city_code'])) {
        $this->city_code = $vals['city_code'];
      }
      if (isset($vals['area'])) {
        $this->area = $vals['area'];
      }
      if (isset($vals['area_code'])) {
        $this->area_code = $vals['area_code'];
      }
      if (isset($vals['street'])) {
        $this->street = $vals['street'];
      }
      if (isset($vals['street_code'])) {
        $this->street_code = $vals['street_code'];
      }
      if (isset($vals['store_code'])) {
        $this->store_code = $vals['store_code'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['zip_code'])) {
        $this->zip_code = $vals['zip_code'];
      }
      if (isset($vals['is_default'])) {
        $this->is_default = $vals['is_default'];
      }
      if (isset($vals['deleted'])) {
        $this->deleted = $vals['deleted'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberAddress';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_address_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telephone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->area);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->area_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->street);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->street_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->store_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zip_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_default);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberAddress');
    if ($this->member_address_id !== null) {
      $xfer += $output->writeFieldBegin('member_address_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_address_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 2);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 4);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 5);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telephone !== null) {
      $xfer += $output->writeFieldBegin('telephone', TType::STRING, 6);
      $xfer += $output->writeString($this->telephone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 7);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province_code !== null) {
      $xfer += $output->writeFieldBegin('province_code', TType::STRING, 8);
      $xfer += $output->writeString($this->province_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 9);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city_code !== null) {
      $xfer += $output->writeFieldBegin('city_code', TType::STRING, 10);
      $xfer += $output->writeString($this->city_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area !== null) {
      $xfer += $output->writeFieldBegin('area', TType::STRING, 11);
      $xfer += $output->writeString($this->area);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area_code !== null) {
      $xfer += $output->writeFieldBegin('area_code', TType::STRING, 12);
      $xfer += $output->writeString($this->area_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->street !== null) {
      $xfer += $output->writeFieldBegin('street', TType::STRING, 13);
      $xfer += $output->writeString($this->street);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->street_code !== null) {
      $xfer += $output->writeFieldBegin('street_code', TType::STRING, 14);
      $xfer += $output->writeString($this->street_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->store_code !== null) {
      $xfer += $output->writeFieldBegin('store_code', TType::STRING, 15);
      $xfer += $output->writeString($this->store_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 16);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zip_code !== null) {
      $xfer += $output->writeFieldBegin('zip_code', TType::STRING, 17);
      $xfer += $output->writeString($this->zip_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_default !== null) {
      $xfer += $output->writeFieldBegin('is_default', TType::I32, 18);
      $xfer += $output->writeI32($this->is_default);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deleted !== null) {
      $xfer += $output->writeFieldBegin('deleted', TType::I32, 19);
      $xfer += $output->writeI32($this->deleted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 20);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 21);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberAddressResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberAddress
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberAddress',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberAddressResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberAddress();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberAddressResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberaddressesResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberAddress[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Client\Member\MemberAddress',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberaddressesResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Thrift\Client\Member\MemberAddress();
              $xfer += $elem12->read($input);
              $this->data []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberaddressesResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员设备信息
 */
class MemberDevice {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var string
   */
  public $device = null;
  /**
   * @var int
   */
  public $device_type = null;
  /**
   * @var string
   */
  public $device_uid = null;
  /**
   * @var string
   */
  public $jg_device = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'device',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'device_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'device_uid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'jg_device',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['device'])) {
        $this->device = $vals['device'];
      }
      if (isset($vals['device_type'])) {
        $this->device_type = $vals['device_type'];
      }
      if (isset($vals['device_uid'])) {
        $this->device_uid = $vals['device_uid'];
      }
      if (isset($vals['jg_device'])) {
        $this->jg_device = $vals['jg_device'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberDevice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->device_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jg_device);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberDevice');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device !== null) {
      $xfer += $output->writeFieldBegin('device', TType::STRING, 2);
      $xfer += $output->writeString($this->device);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_type !== null) {
      $xfer += $output->writeFieldBegin('device_type', TType::I32, 3);
      $xfer += $output->writeI32($this->device_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_uid !== null) {
      $xfer += $output->writeFieldBegin('device_uid', TType::STRING, 4);
      $xfer += $output->writeString($this->device_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jg_device !== null) {
      $xfer += $output->writeFieldBegin('jg_device', TType::STRING, 5);
      $xfer += $output->writeString($this->jg_device);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 6);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 7);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberDeviceResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberDevice
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberDevice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberDeviceResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberDevice();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberDeviceResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员卡基础资料
 */
class MemberVipcardBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var int
   */
  public $card_sys_id = null;
  /**
   * @var string
   */
  public $card_no = null;
  /**
   * @var int
   */
  public $card_level = null;
  /**
   * @var string
   */
  public $card_store = null;
  /**
   * @var string
   */
  public $card_balance = null;
  /**
   * @var string
   */
  public $card_score = null;
  /**
   * @var int
   */
  public $card_isbind = null;
  /**
   * @var int
   */
  public $card_bind_date = null;
  /**
   * @var int
   */
  public $card_unlock_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_sys_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'card_no',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'card_level',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'card_store',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'card_balance',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'card_score',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'card_isbind',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'card_bind_date',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'card_unlock_date',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['card_sys_id'])) {
        $this->card_sys_id = $vals['card_sys_id'];
      }
      if (isset($vals['card_no'])) {
        $this->card_no = $vals['card_no'];
      }
      if (isset($vals['card_level'])) {
        $this->card_level = $vals['card_level'];
      }
      if (isset($vals['card_store'])) {
        $this->card_store = $vals['card_store'];
      }
      if (isset($vals['card_balance'])) {
        $this->card_balance = $vals['card_balance'];
      }
      if (isset($vals['card_score'])) {
        $this->card_score = $vals['card_score'];
      }
      if (isset($vals['card_isbind'])) {
        $this->card_isbind = $vals['card_isbind'];
      }
      if (isset($vals['card_bind_date'])) {
        $this->card_bind_date = $vals['card_bind_date'];
      }
      if (isset($vals['card_unlock_date'])) {
        $this->card_unlock_date = $vals['card_unlock_date'];
      }
    }
  }

  public function getName() {
    return 'MemberVipcardBase';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->card_sys_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_store);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_isbind);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_bind_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_unlock_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberVipcardBase');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_sys_id !== null) {
      $xfer += $output->writeFieldBegin('card_sys_id', TType::I64, 2);
      $xfer += $output->writeI64($this->card_sys_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_no !== null) {
      $xfer += $output->writeFieldBegin('card_no', TType::STRING, 3);
      $xfer += $output->writeString($this->card_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_level !== null) {
      $xfer += $output->writeFieldBegin('card_level', TType::I32, 4);
      $xfer += $output->writeI32($this->card_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_store !== null) {
      $xfer += $output->writeFieldBegin('card_store', TType::STRING, 5);
      $xfer += $output->writeString($this->card_store);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_balance !== null) {
      $xfer += $output->writeFieldBegin('card_balance', TType::STRING, 6);
      $xfer += $output->writeString($this->card_balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_score !== null) {
      $xfer += $output->writeFieldBegin('card_score', TType::STRING, 7);
      $xfer += $output->writeString($this->card_score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_isbind !== null) {
      $xfer += $output->writeFieldBegin('card_isbind', TType::I32, 8);
      $xfer += $output->writeI32($this->card_isbind);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_bind_date !== null) {
      $xfer += $output->writeFieldBegin('card_bind_date', TType::I32, 9);
      $xfer += $output->writeI32($this->card_bind_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_unlock_date !== null) {
      $xfer += $output->writeFieldBegin('card_unlock_date', TType::I32, 10);
      $xfer += $output->writeI32($this->card_unlock_date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberVipcardBaseResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberVipcardBase
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberVipcardBase',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberVipcardBaseResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberVipcardBase();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberVipcardBaseResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员卡持卡人资料
 */
class MemberVipcardProfile {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var int
   */
  public $card_sys_id = null;
  /**
   * @var string
   */
  public $card_type = null;
  /**
   * @var int
   */
  public $card_status = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $birthday = null;
  /**
   * @var int
   */
  public $gender = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var int
   */
  public $card_begin_date = null;
  /**
   * @var int
   */
  public $card_exp_date = null;
  /**
   * @var int
   */
  public $vip_begin_date = null;
  /**
   * @var int
   */
  public $vip_exp_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_sys_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'card_type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'card_status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'birthday',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'card_begin_date',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'card_exp_date',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'vip_begin_date',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'vip_exp_date',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['card_sys_id'])) {
        $this->card_sys_id = $vals['card_sys_id'];
      }
      if (isset($vals['card_type'])) {
        $this->card_type = $vals['card_type'];
      }
      if (isset($vals['card_status'])) {
        $this->card_status = $vals['card_status'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['birthday'])) {
        $this->birthday = $vals['birthday'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['card_begin_date'])) {
        $this->card_begin_date = $vals['card_begin_date'];
      }
      if (isset($vals['card_exp_date'])) {
        $this->card_exp_date = $vals['card_exp_date'];
      }
      if (isset($vals['vip_begin_date'])) {
        $this->vip_begin_date = $vals['vip_begin_date'];
      }
      if (isset($vals['vip_exp_date'])) {
        $this->vip_exp_date = $vals['vip_exp_date'];
      }
    }
  }

  public function getName() {
    return 'MemberVipcardProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->card_sys_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->birthday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_begin_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_exp_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_begin_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_exp_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberVipcardProfile');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_sys_id !== null) {
      $xfer += $output->writeFieldBegin('card_sys_id', TType::I64, 2);
      $xfer += $output->writeI64($this->card_sys_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_type !== null) {
      $xfer += $output->writeFieldBegin('card_type', TType::STRING, 3);
      $xfer += $output->writeString($this->card_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_status !== null) {
      $xfer += $output->writeFieldBegin('card_status', TType::I32, 4);
      $xfer += $output->writeI32($this->card_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->birthday !== null) {
      $xfer += $output->writeFieldBegin('birthday', TType::I32, 6);
      $xfer += $output->writeI32($this->birthday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 7);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 8);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_begin_date !== null) {
      $xfer += $output->writeFieldBegin('card_begin_date', TType::I32, 9);
      $xfer += $output->writeI32($this->card_begin_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_exp_date !== null) {
      $xfer += $output->writeFieldBegin('card_exp_date', TType::I32, 10);
      $xfer += $output->writeI32($this->card_exp_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_begin_date !== null) {
      $xfer += $output->writeFieldBegin('vip_begin_date', TType::I32, 11);
      $xfer += $output->writeI32($this->vip_begin_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_exp_date !== null) {
      $xfer += $output->writeFieldBegin('vip_exp_date', TType::I32, 12);
      $xfer += $output->writeI32($this->vip_exp_date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberVipcardProfileResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberVipcardProfile
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberVipcardProfile',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberVipcardProfileResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberVipcardProfile();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberVipcardProfileResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 实名认证信息
 */
class MemberIdentity {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var string
   */
  public $surname = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $full_name = null;
  /**
   * @var string
   */
  public $idno = null;
  /**
   * @var string
   */
  public $id_photo_head = null;
  /**
   * @var string
   */
  public $id_photo_tail = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;
  /**
   * @var string
   */
  public $salt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'surname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'full_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'idno',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'id_photo_head',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'id_photo_tail',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'salt',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['surname'])) {
        $this->surname = $vals['surname'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['full_name'])) {
        $this->full_name = $vals['full_name'];
      }
      if (isset($vals['idno'])) {
        $this->idno = $vals['idno'];
      }
      if (isset($vals['id_photo_head'])) {
        $this->id_photo_head = $vals['id_photo_head'];
      }
      if (isset($vals['id_photo_tail'])) {
        $this->id_photo_tail = $vals['id_photo_tail'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
      if (isset($vals['salt'])) {
        $this->salt = $vals['salt'];
      }
    }
  }

  public function getName() {
    return 'MemberIdentity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->surname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->full_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id_photo_head);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id_photo_tail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->salt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberIdentity');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->surname !== null) {
      $xfer += $output->writeFieldBegin('surname', TType::STRING, 2);
      $xfer += $output->writeString($this->surname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_name !== null) {
      $xfer += $output->writeFieldBegin('full_name', TType::STRING, 4);
      $xfer += $output->writeString($this->full_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idno !== null) {
      $xfer += $output->writeFieldBegin('idno', TType::STRING, 5);
      $xfer += $output->writeString($this->idno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_photo_head !== null) {
      $xfer += $output->writeFieldBegin('id_photo_head', TType::STRING, 6);
      $xfer += $output->writeString($this->id_photo_head);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_photo_tail !== null) {
      $xfer += $output->writeFieldBegin('id_photo_tail', TType::STRING, 7);
      $xfer += $output->writeString($this->id_photo_tail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 8);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 9);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salt !== null) {
      $xfer += $output->writeFieldBegin('salt', TType::STRING, 10);
      $xfer += $output->writeString($this->salt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberIdentityResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberIdentity
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberIdentity',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberIdentityResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberIdentity();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberIdentityResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员推送信息
 */
class MemberPush {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var int
   */
  public $platform = null;
  /**
   * @var int
   */
  public $enable_app_push = null;
  /**
   * @var string
   */
  public $openid = null;
  /**
   * @var string
   */
  public $devicetoken = null;
  /**
   * @var string
   */
  public $deviceuid = null;
  /**
   * @var int
   */
  public $devicetype = null;
  /**
   * @var int
   */
  public $last_login_time = null;
  /**
   * @var int
   */
  public $last_logout_time = null;
  /**
   * @var int
   */
  public $online = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'enable_app_push',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'openid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'devicetoken',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'deviceuid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'devicetype',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'last_login_time',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'last_logout_time',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'online',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['enable_app_push'])) {
        $this->enable_app_push = $vals['enable_app_push'];
      }
      if (isset($vals['openid'])) {
        $this->openid = $vals['openid'];
      }
      if (isset($vals['devicetoken'])) {
        $this->devicetoken = $vals['devicetoken'];
      }
      if (isset($vals['deviceuid'])) {
        $this->deviceuid = $vals['deviceuid'];
      }
      if (isset($vals['devicetype'])) {
        $this->devicetype = $vals['devicetype'];
      }
      if (isset($vals['last_login_time'])) {
        $this->last_login_time = $vals['last_login_time'];
      }
      if (isset($vals['last_logout_time'])) {
        $this->last_logout_time = $vals['last_logout_time'];
      }
      if (isset($vals['online'])) {
        $this->online = $vals['online'];
      }
    }
  }

  public function getName() {
    return 'MemberPush';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enable_app_push);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->devicetoken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->devicetype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->last_login_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->last_logout_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->online);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberPush');
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 2);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enable_app_push !== null) {
      $xfer += $output->writeFieldBegin('enable_app_push', TType::I32, 3);
      $xfer += $output->writeI32($this->enable_app_push);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openid !== null) {
      $xfer += $output->writeFieldBegin('openid', TType::STRING, 4);
      $xfer += $output->writeString($this->openid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->devicetoken !== null) {
      $xfer += $output->writeFieldBegin('devicetoken', TType::STRING, 5);
      $xfer += $output->writeString($this->devicetoken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceuid !== null) {
      $xfer += $output->writeFieldBegin('deviceuid', TType::STRING, 6);
      $xfer += $output->writeString($this->deviceuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->devicetype !== null) {
      $xfer += $output->writeFieldBegin('devicetype', TType::I32, 7);
      $xfer += $output->writeI32($this->devicetype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_login_time !== null) {
      $xfer += $output->writeFieldBegin('last_login_time', TType::I32, 8);
      $xfer += $output->writeI32($this->last_login_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_logout_time !== null) {
      $xfer += $output->writeFieldBegin('last_logout_time', TType::I32, 9);
      $xfer += $output->writeI32($this->last_logout_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->online !== null) {
      $xfer += $output->writeFieldBegin('online', TType::I32, 10);
      $xfer += $output->writeI32($this->online);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberPushResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberPush
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberPush',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberPushResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberPush();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberPushResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员认证信息
 */
class MemberCrdl {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_crdl_id = null;
  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var int
   */
  public $platform = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $salt = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_crdl_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'salt',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_crdl_id'])) {
        $this->member_crdl_id = $vals['member_crdl_id'];
      }
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['salt'])) {
        $this->salt = $vals['salt'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberCrdl';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_crdl_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->salt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCrdl');
    if ($this->member_crdl_id !== null) {
      $xfer += $output->writeFieldBegin('member_crdl_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_crdl_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 2);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 3);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 4);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salt !== null) {
      $xfer += $output->writeFieldBegin('salt', TType::STRING, 5);
      $xfer += $output->writeString($this->salt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 6);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 8);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 9);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCrdlResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberCrdl
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberCrdl',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberCrdlResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberCrdl();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCrdlResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCrdlResultList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberCrdl[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Client\Member\MemberCrdl',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberCrdlResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \Thrift\Client\Member\MemberCrdl();
              $xfer += $elem19->read($input);
              $this->data []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCrdlResultList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员卡消费积分记录
 * 
 */
class MemberScoreLog {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $member_id = null;
  /**
   * @var string
   */
  public $card_no = null;
  /**
   * @var int
   */
  public $card_level = null;
  /**
   * @var string
   */
  public $credit = null;
  /**
   * @var string
   */
  public $store_code = null;
  /**
   * @var string
   */
  public $store_name = null;
  /**
   * @var string
   */
  public $trade_balance = null;
  /**
   * @var string
   */
  public $balance = null;
  /**
   * @var string
   */
  public $consume_balance = null;
  /**
   * @var string
   */
  public $txn_id = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'member_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'card_no',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'card_level',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'credit',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'store_code',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'store_name',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'trade_balance',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'balance',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'consume_balance',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'txn_id',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['card_no'])) {
        $this->card_no = $vals['card_no'];
      }
      if (isset($vals['card_level'])) {
        $this->card_level = $vals['card_level'];
      }
      if (isset($vals['credit'])) {
        $this->credit = $vals['credit'];
      }
      if (isset($vals['store_code'])) {
        $this->store_code = $vals['store_code'];
      }
      if (isset($vals['store_name'])) {
        $this->store_name = $vals['store_name'];
      }
      if (isset($vals['trade_balance'])) {
        $this->trade_balance = $vals['trade_balance'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['consume_balance'])) {
        $this->consume_balance = $vals['consume_balance'];
      }
      if (isset($vals['txn_id'])) {
        $this->txn_id = $vals['txn_id'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberScoreLog';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->credit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->store_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->store_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trade_balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->consume_balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->txn_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberScoreLog');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::STRING, 2);
      $xfer += $output->writeString($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_no !== null) {
      $xfer += $output->writeFieldBegin('card_no', TType::STRING, 3);
      $xfer += $output->writeString($this->card_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_level !== null) {
      $xfer += $output->writeFieldBegin('card_level', TType::I32, 4);
      $xfer += $output->writeI32($this->card_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->credit !== null) {
      $xfer += $output->writeFieldBegin('credit', TType::STRING, 5);
      $xfer += $output->writeString($this->credit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->store_code !== null) {
      $xfer += $output->writeFieldBegin('store_code', TType::STRING, 6);
      $xfer += $output->writeString($this->store_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->store_name !== null) {
      $xfer += $output->writeFieldBegin('store_name', TType::STRING, 7);
      $xfer += $output->writeString($this->store_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trade_balance !== null) {
      $xfer += $output->writeFieldBegin('trade_balance', TType::STRING, 8);
      $xfer += $output->writeString($this->trade_balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::STRING, 9);
      $xfer += $output->writeString($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consume_balance !== null) {
      $xfer += $output->writeFieldBegin('consume_balance', TType::STRING, 10);
      $xfer += $output->writeString($this->consume_balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->txn_id !== null) {
      $xfer += $output->writeFieldBegin('txn_id', TType::STRING, 11);
      $xfer += $output->writeString($this->txn_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 12);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberScoreLogResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberScoreLog
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberScoreLog',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberScoreLogResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberScoreLog();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberScoreLogResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberScoreLogResultList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberScoreLog[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Client\Member\MemberScoreLog',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberScoreLogResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Thrift\Client\Member\MemberScoreLog();
              $xfer += $elem26->read($input);
              $this->data []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberScoreLogResultList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员卡积分变革记录
 * 
 */
class MemberScore {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var double
   */
  public $score = null;
  /**
   * @var int
   */
  public $score_type = null;
  /**
   * @var string
   */
  public $order_no = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $card_no = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'score',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'score_type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'order_no',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'card_no',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['score_type'])) {
        $this->score_type = $vals['score_type'];
      }
      if (isset($vals['order_no'])) {
        $this->order_no = $vals['order_no'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['card_no'])) {
        $this->card_no = $vals['card_no'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberScore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->card_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberScore');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 2);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score_type !== null) {
      $xfer += $output->writeFieldBegin('score_type', TType::I32, 4);
      $xfer += $output->writeI32($this->score_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_no !== null) {
      $xfer += $output->writeFieldBegin('order_no', TType::STRING, 5);
      $xfer += $output->writeString($this->order_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 6);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_no !== null) {
      $xfer += $output->writeFieldBegin('card_no', TType::STRING, 7);
      $xfer += $output->writeString($this->card_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 8);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberScoreResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberScore
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberScore',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberScoreResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberScore();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberScoreResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员标签
 * 
 */
class MemberTag {
  static $_TSPEC;

  /**
   * @var int
   */
  public $member_tag_id = null;
  /**
   * @var int
   */
  public $member_id = null;
  /**
   * @var int
   */
  public $tag_id = null;
  /**
   * @var string
   */
  public $tag_name = null;
  /**
   * @var string
   */
  public $tag_memo = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $updated_at = null;
  /**
   * @var int
   */
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'member_tag_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'member_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'tag_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tag_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'tag_memo',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'updated_at',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['member_tag_id'])) {
        $this->member_tag_id = $vals['member_tag_id'];
      }
      if (isset($vals['member_id'])) {
        $this->member_id = $vals['member_id'];
      }
      if (isset($vals['tag_id'])) {
        $this->tag_id = $vals['tag_id'];
      }
      if (isset($vals['tag_name'])) {
        $this->tag_name = $vals['tag_name'];
      }
      if (isset($vals['tag_memo'])) {
        $this->tag_memo = $vals['tag_memo'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['updated_at'])) {
        $this->updated_at = $vals['updated_at'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
    }
  }

  public function getName() {
    return 'MemberTag';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_tag_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->member_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tag_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag_memo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updated_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberTag');
    if ($this->member_tag_id !== null) {
      $xfer += $output->writeFieldBegin('member_tag_id', TType::I32, 1);
      $xfer += $output->writeI32($this->member_tag_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member_id !== null) {
      $xfer += $output->writeFieldBegin('member_id', TType::I32, 2);
      $xfer += $output->writeI32($this->member_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag_id !== null) {
      $xfer += $output->writeFieldBegin('tag_id', TType::I32, 3);
      $xfer += $output->writeI32($this->tag_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag_name !== null) {
      $xfer += $output->writeFieldBegin('tag_name', TType::STRING, 4);
      $xfer += $output->writeString($this->tag_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag_memo !== null) {
      $xfer += $output->writeFieldBegin('tag_memo', TType::STRING, 5);
      $xfer += $output->writeString($this->tag_memo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_at !== null) {
      $xfer += $output->writeFieldBegin('updated_at', TType::I32, 7);
      $xfer += $output->writeI32($this->updated_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::I32, 8);
      $xfer += $output->writeI32($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberTagResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberTag[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Client\Member\MemberTag',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberTagResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Thrift\Client\Member\MemberTag();
              $xfer += $elem33->read($input);
              $this->data []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberTagResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 异常
 */
class THBaseException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'THBaseException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('THBaseException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员群组
 */
class MemberGroup {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupId = null;
  /**
   * @var string
   */
  public $groupName = null;
  /**
   * @var string
   */
  public $groupCode = null;
  /**
   * @var string
   */
  public $groupMemo = null;
  /**
   * @var int
   */
  public $groupType = null;
  /**
   * @var int
   */
  public $groupMode = null;
  /**
   * @var int
   */
  public $enabled = null;
  /**
   * @var int
   */
  public $isDeleted = null;
  /**
   * @var int
   */
  public $isInvoice = null;
  /**
   * @var int
   */
  public $updatedAt = null;
  /**
   * @var int
   */
  public $createdAt = null;
  /**
   * @var string
   */
  public $createdBy = null;
  /**
   * @var string
   */
  public $updateBy = null;
  /**
   * @var int
   */
  public $oldGroupId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'groupCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'groupMemo',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'groupType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'groupMode',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'enabled',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'isDeleted',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'isInvoice',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'updatedAt',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'createdAt',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'createdBy',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'updateBy',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'oldGroupId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['groupName'])) {
        $this->groupName = $vals['groupName'];
      }
      if (isset($vals['groupCode'])) {
        $this->groupCode = $vals['groupCode'];
      }
      if (isset($vals['groupMemo'])) {
        $this->groupMemo = $vals['groupMemo'];
      }
      if (isset($vals['groupType'])) {
        $this->groupType = $vals['groupType'];
      }
      if (isset($vals['groupMode'])) {
        $this->groupMode = $vals['groupMode'];
      }
      if (isset($vals['enabled'])) {
        $this->enabled = $vals['enabled'];
      }
      if (isset($vals['isDeleted'])) {
        $this->isDeleted = $vals['isDeleted'];
      }
      if (isset($vals['isInvoice'])) {
        $this->isInvoice = $vals['isInvoice'];
      }
      if (isset($vals['updatedAt'])) {
        $this->updatedAt = $vals['updatedAt'];
      }
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
      if (isset($vals['createdBy'])) {
        $this->createdBy = $vals['createdBy'];
      }
      if (isset($vals['updateBy'])) {
        $this->updateBy = $vals['updateBy'];
      }
      if (isset($vals['oldGroupId'])) {
        $this->oldGroupId = $vals['oldGroupId'];
      }
    }
  }

  public function getName() {
    return 'MemberGroup';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupMemo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isDeleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isInvoice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updatedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updateBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->oldGroupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroup');
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::I32, 1);
      $xfer += $output->writeI32($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupName !== null) {
      $xfer += $output->writeFieldBegin('groupName', TType::STRING, 2);
      $xfer += $output->writeString($this->groupName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupCode !== null) {
      $xfer += $output->writeFieldBegin('groupCode', TType::STRING, 3);
      $xfer += $output->writeString($this->groupCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupMemo !== null) {
      $xfer += $output->writeFieldBegin('groupMemo', TType::STRING, 4);
      $xfer += $output->writeString($this->groupMemo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupType !== null) {
      $xfer += $output->writeFieldBegin('groupType', TType::I32, 5);
      $xfer += $output->writeI32($this->groupType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupMode !== null) {
      $xfer += $output->writeFieldBegin('groupMode', TType::I32, 6);
      $xfer += $output->writeI32($this->groupMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enabled !== null) {
      $xfer += $output->writeFieldBegin('enabled', TType::I32, 7);
      $xfer += $output->writeI32($this->enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDeleted !== null) {
      $xfer += $output->writeFieldBegin('isDeleted', TType::I32, 8);
      $xfer += $output->writeI32($this->isDeleted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isInvoice !== null) {
      $xfer += $output->writeFieldBegin('isInvoice', TType::I32, 9);
      $xfer += $output->writeI32($this->isInvoice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedAt !== null) {
      $xfer += $output->writeFieldBegin('updatedAt', TType::I32, 10);
      $xfer += $output->writeI32($this->updatedAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::I32, 11);
      $xfer += $output->writeI32($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdBy !== null) {
      $xfer += $output->writeFieldBegin('createdBy', TType::STRING, 12);
      $xfer += $output->writeString($this->createdBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateBy !== null) {
      $xfer += $output->writeFieldBegin('updateBy', TType::STRING, 13);
      $xfer += $output->writeString($this->updateBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oldGroupId !== null) {
      $xfer += $output->writeFieldBegin('oldGroupId', TType::I32, 14);
      $xfer += $output->writeI32($this->oldGroupId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 群组规则
 */
class MemberGroupRule {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ruleId = null;
  /**
   * @var int
   */
  public $groupId = null;
  /**
   * @var int
   */
  public $memberLevel = null;
  /**
   * @var int
   */
  public $registerStartTime = null;
  /**
   * @var int
   */
  public $registerEndTime = null;
  /**
   * @var int
   */
  public $sex = null;
  /**
   * @var int
   */
  public $startAge = null;
  /**
   * @var int
   */
  public $endAge = null;
  /**
   * @var int
   */
  public $marriage = null;
  /**
   * @var int
   */
  public $loginStartTime = null;
  /**
   * @var int
   */
  public $loginEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ruleId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'memberLevel',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'registerStartTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'registerEndTime',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'sex',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'startAge',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'endAge',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'marriage',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'loginStartTime',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'loginEndTime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ruleId'])) {
        $this->ruleId = $vals['ruleId'];
      }
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['memberLevel'])) {
        $this->memberLevel = $vals['memberLevel'];
      }
      if (isset($vals['registerStartTime'])) {
        $this->registerStartTime = $vals['registerStartTime'];
      }
      if (isset($vals['registerEndTime'])) {
        $this->registerEndTime = $vals['registerEndTime'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['startAge'])) {
        $this->startAge = $vals['startAge'];
      }
      if (isset($vals['endAge'])) {
        $this->endAge = $vals['endAge'];
      }
      if (isset($vals['marriage'])) {
        $this->marriage = $vals['marriage'];
      }
      if (isset($vals['loginStartTime'])) {
        $this->loginStartTime = $vals['loginStartTime'];
      }
      if (isset($vals['loginEndTime'])) {
        $this->loginEndTime = $vals['loginEndTime'];
      }
    }
  }

  public function getName() {
    return 'MemberGroupRule';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ruleId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->registerStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->registerEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startAge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->endAge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->marriage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->loginStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->loginEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroupRule');
    if ($this->ruleId !== null) {
      $xfer += $output->writeFieldBegin('ruleId', TType::I32, 1);
      $xfer += $output->writeI32($this->ruleId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::I32, 2);
      $xfer += $output->writeI32($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberLevel !== null) {
      $xfer += $output->writeFieldBegin('memberLevel', TType::I32, 3);
      $xfer += $output->writeI32($this->memberLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registerStartTime !== null) {
      $xfer += $output->writeFieldBegin('registerStartTime', TType::I32, 4);
      $xfer += $output->writeI32($this->registerStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registerEndTime !== null) {
      $xfer += $output->writeFieldBegin('registerEndTime', TType::I32, 5);
      $xfer += $output->writeI32($this->registerEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::I32, 6);
      $xfer += $output->writeI32($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startAge !== null) {
      $xfer += $output->writeFieldBegin('startAge', TType::I32, 7);
      $xfer += $output->writeI32($this->startAge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endAge !== null) {
      $xfer += $output->writeFieldBegin('endAge', TType::I32, 8);
      $xfer += $output->writeI32($this->endAge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->marriage !== null) {
      $xfer += $output->writeFieldBegin('marriage', TType::I32, 9);
      $xfer += $output->writeI32($this->marriage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginStartTime !== null) {
      $xfer += $output->writeFieldBegin('loginStartTime', TType::I32, 10);
      $xfer += $output->writeI32($this->loginStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginEndTime !== null) {
      $xfer += $output->writeFieldBegin('loginEndTime', TType::I32, 11);
      $xfer += $output->writeI32($this->loginEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 
 */
class MemberGroupResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberGroup
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberGroup',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberGroupResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberGroup();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroupResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 会员群成员
 */
class MemberGroupRelation {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $groupId = null;
  /**
   * @var int
   */
  public $memberId = null;
  /**
   * @var int
   */
  public $groupType = null;
  /**
   * @var int
   */
  public $createdAt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'memberId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'groupType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'createdAt',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['memberId'])) {
        $this->memberId = $vals['memberId'];
      }
      if (isset($vals['groupType'])) {
        $this->groupType = $vals['groupType'];
      }
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
    }
  }

  public function getName() {
    return 'MemberGroupRelation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroupRelation');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::I32, 2);
      $xfer += $output->writeI32($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberId !== null) {
      $xfer += $output->writeFieldBegin('memberId', TType::I32, 3);
      $xfer += $output->writeI32($this->memberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupType !== null) {
      $xfer += $output->writeFieldBegin('groupType', TType::I32, 4);
      $xfer += $output->writeI32($this->groupType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::I32, 5);
      $xfer += $output->writeI32($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberGroupRelationResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberGroupRelation
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberGroupRelation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberGroupRelationResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberGroupRelation();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroupRelationResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberGroupRuleResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberGroupRule
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Client\Member\MemberGroupRule',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberGroupRuleResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Thrift\Client\Member\MemberGroupRule();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroupRuleResult');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberGroupResultList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberGroup[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Client\Member\MemberGroup',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberGroupResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Thrift\Client\Member\MemberGroup();
              $xfer += $elem40->read($input);
              $this->data []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroupResultList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberGroupRelationResultList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Thrift\Client\Member\MemberGroupRelation[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Client\Member\MemberGroupRelation',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MemberGroupRelationResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \Thrift\Client\Member\MemberGroupRelation();
              $xfer += $elem47->read($input);
              $this->data []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberGroupRelationResultList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $Success;
  static protected $NdbTransStartExcp;
  static protected $NdbTransCommitExcp;
  static protected $NdbOperationExcp;
  static protected $NdbIdxOperationExcp;
  static protected $NdbDictTblExcp;
  static protected $NdbDictIdxExcp;
  static protected $IncrIdExcp;
  static protected $DataNotFound;
  static protected $AuthPasswdError;
  static protected $AuthFailed;
  static protected $ParameterEmity;
  static protected $EXCEPTIONCODE;
  static protected $SuccessMsg;
  static protected $DataNotFoundMsg;
  static protected $AuthFailedMsg;
  static protected $AuthPasswdErrorMsg;
  static protected $ParameterEmityMsg;
  static protected $EXCEPTIONCODEMsg;

  static protected function init_Success() {
    return     /**
     * ========================================================================================
     * 数据结构
     */
200;
  }

  static protected function init_NdbTransStartExcp() {
    return 10101;
  }

  static protected function init_NdbTransCommitExcp() {
    return 10102;
  }

  static protected function init_NdbOperationExcp() {
    return 10103;
  }

  static protected function init_NdbIdxOperationExcp() {
    return 10104;
  }

  static protected function init_NdbDictTblExcp() {
    return 10105;
  }

  static protected function init_NdbDictIdxExcp() {
    return 10106;
  }

  static protected function init_IncrIdExcp() {
    return 10107;
  }

  static protected function init_DataNotFound() {
    return 30101;
  }

  static protected function init_AuthPasswdError() {
    return 30105;
  }

  static protected function init_AuthFailed() {
    return 30104;
  }

  static protected function init_ParameterEmity() {
    return 30108;
  }

  static protected function init_EXCEPTIONCODE() {
    return 30414;
  }

  static protected function init_SuccessMsg() {
    return "执行成功";
  }

  static protected function init_DataNotFoundMsg() {
    return "无查询数据";
  }

  static protected function init_AuthFailedMsg() {
    return "认证失败";
  }

  static protected function init_AuthPasswdErrorMsg() {
    return "密码错误";
  }

  static protected function init_ParameterEmityMsg() {
    return "请求参数为空";
  }

  static protected function init_EXCEPTIONCODEMsg() {
    return "系统异常";
  }
}


